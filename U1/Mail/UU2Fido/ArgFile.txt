rmail
dz
ache@p34.f23.n5020.z2.fidonet
postmaster
<<NULL>>
From dz!dialnet
From: dz
Subject: empty
Date: 23 Sep 91
Newsgropus: jwrejre

Alex! 
I'm really very sorry, but it is a test, too!


:) Only one, but such a mighty thing, huh?


Please, ignore the following texts, they're needed only to make it > 8Kb.


















/************************ UUCP to FIDO gate ***************************\
 *
 *	Copyright (C) 1991 by Infinity Soft
 *
 *	Module 	:	UUCP header parser
 *
 *      $Log:   C:/net/gate/uu2fido/vcs/convert.c_v  $
 *
 *
 *
\*/

#include	<style.h>
#include	<ctype.h>
#include	<errno.h>
#include	<stdlib.h>
#include	<string.h>
#include	<time.h>

#include	<fido_msg.h>

#include	"..\version.h"

#include	"uu2fido.h"
#include	"setup.h"
#include	"log.h"

#include	"uuparse.h"


extern unsigned char	koi8_to_pc_tab[256];



#define		BUFS	500

				/*********************************************
							   Local functions
				*********************************************/


static bool			is_first_from	( uchar *s );
static bool			is_new_hl		( uchar *s );
static bool			is_cont_hl		( uchar *s );

static void			hlcpy			( char *to, char *from, int n );

static void			process_hl		( char *hl, uuinfo *ui );

static bool			uuencoded		( void );





bool
uuparse( uuinfo *ui ) {
	char			buf[ BUFS ];
	char			hl[ BUFS * 2 ];
	bool			have_hl	= No;

	rewind( stdin );

	while( 1 ) {
		char	*ee, *p;

		if( fgets( buf, BUFS, stdin  ) == NULL ) {		// Next line

			if( ferror( stdin ) )
				error("Problems reading stdin");

			if( have_hl )
				process_hl( hl, ui );					// Headline in buf

			break;
			}

		for( p = buf; *p; p++ )	{						// KOI8 to alt. code
			*p = koi8_to_pc_tab[*p];
			if( *p == 'Œ'+1 )							// Russian 'H'
				*p = 'H';
			}


		if( (ee = strpbrk( buf, "\r\n" )) != NULL )	// Kill any CRLFs
			*ee = '\0';



		if( is_first_from( buf ) ) {				// From[~:] ??
			strcpy( hl, buf );						// Get beg. of headline
			have_hl = Yes;							// We have one
			continue;
			}

		if( is_cont_hl( buf ) ) {			// headline continuation?
			char	*pp = buf;

			if( !have_hl )
				fatal( 1, "Continuation withno headline!!");

			while( *pp == ' ' || *pp == ' ' )		// Skip ws
				pp++;

			strcat( hl, " " );						// Delimiter
			strcat( hl, pp );						// Add continuation
			continue;
			}

		if( have_hl ) {								// Not a continuation
			process_hl( hl, ui );				// Process saved one
			have_hl = No;							// Forget it
			}

		if( is_new_hl( buf ) ) {					// Oh, new headline
			strcpy( hl, buf );						// Save it
			have_hl = Yes;							// Mark - we have one
			continue;
			}


		if( uuencoded() )
			ui->uuencoded = Yes;
		else
			ui->uuencoded = No;

		}

	return Ok;
	}


static void
decode_from( char *dst, char *src ) {
	char	*cp, *op;

	op = dst;

	if( (cp = strchr( src, '<' )) != NULL ) {			// <addr> form

		cp++;											// Skip '<'
		while( *cp ) {
			if( *cp == '>' ) {							// Got it
				*op = '\0';
				return;
				}

			if( *cp < ' ' ) {
				cp++;
				continue;
				}

			if( op - dst > 34 ) {						// Too long
				*dst = '\0';							// Clear
				return;
				}

			*op++ = *cp++;
			}

		*dst = '\0';									// No '>', clear
		return;
		}

	cp = src;
	while( *cp && *cp < ' ' )							// Skip ws
		cp++;

	while( *cp > ' ' ) {
		if( op - dst > 34 ) {							// Too long
			*dst = '\0';								// Clear
			return;
			}

		*op++ = *cp++;
		}

	*op = '\0';											// Done;
	}




void
process_hl( char *hl, uuinfo *ui ) {

	// Specially interested in this ones

	if( !strncmpi( hl, "Subject:", 8 ))
		hlcpy( ui->subject, hl, 71 );

	if( !strncmpi( hl, "Date:", 5 ))
		hlcpy( ui->date, hl, 20 );

	if( !strncmpi( hl, "From:", 5 )) {
		char	buf[101];
		hlcpy( buf, hl, 100 );

		decode_from( ui->from, buf );

		}

	if( !strncmpi( hl, "Newsgroups:", 5 ))
		hlcpy( ui->newsgroups, hl, HLSIZE-1 );



	hl[0] = '\0';
	}



/****************************************************************************
						Utilitary functions
****************************************************************************/


void
hlcpy( char *to, char *from, int n ) {		// Extract headline body
	while( *from && *from != ':' )
		from++;

	if( *from != ':' ) {
		strcpy( to, "Incorrect or empty" );
		return;
		}

	from++;

	while( *from && *from <= ' ' )
		from++;

	strncpy( to, from, n );
	to[n-1] = '\0';
	}


/****************************************************************************
						Headline detectors
****************************************************************************/

bool
is_first_from( uchar *s ) {					// Message leader?
	if( strncmp( s, "From", 4 ) )			// `From' withno `:'
		return No;

	if( s[4] == ':' )
		return No;
		
	return Yes;
	}

bool
is_new_hl( uchar *s ) {						// Headline?
	while( *s ) {
		if( isalpha( *s ) || *s == '-' ) {
			s++;
			continue;
			}

		if( *s == ':' )
			return Yes;

		return No;
		}

	return No;
	}


bool
is_cont_hl( uchar *s ) {					// Headline continuation ?

	if( *s == ' ' || *s == '\t' )
			return Yes;

	return No;
	}



	/*************************************************************
					 Detect UUencoded text presence
	*************************************************************/



static bool
uuencoded( void ) {
	return No;
	}

/**
 *
 *	KOI8 to PC Alternative code conversion
 *
 *	$Log:   C:/net/gate/uu2fido/vcs/koi8.c_v  $
 *      
 *         Rev 1.0   28 Aug 1991 00:27:06   dz
 *      Initial revision.
 *
 *
**/


unsigned char	koi8_to_pc_tab[256]	= {

	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
	0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 
	0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 
	0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
	0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 
	0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 
	0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
	0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 
	0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 
	0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 
	0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 
	0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 
	0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
	0xA0, 0xA1, 0xA2, 0xF1, 0xA4, 0xA5, 0xA6, 0xA7, 
	0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 
	0xB0, 0xB1, 0xB2, 0xF0, 0xB4, 0xB5, 0xB6, 0xB7, 
	0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 
	0xEE, 0xA0, 0xA1, 0xE6, 0xA4, 0xA5, 0xE4, 0xA3,
	0xE5, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 
	0xAF, 0xEF, 0xE0, 0xE1, 0xE2, 0xE3, 0xA6, 0xA2, 
	0xEC, 0xEB, 0xA7, 0xE8, 0xED, 0xE9, 0xE7, 0xEA, 
	0x9E, 0x80, 0x81, 0x96, 0x84, 0x85, 0x94, 0x83, 
	0x95, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 
	0x8F, 0x9F, 0x90, 0x91, 0x92, 0x93, 0x86, 0x82, 
	0x9C, 0x9B, 0x87, 0x98, 0x9D, 0x99, 0x97, 0x9A, 

	};



/************************ UUCP to FIDO gate ***************************\
 *
 *	Copyright (C) 1991 by Infinity Soft
 *
 *	Module 	:	Address conversion
 *
 *      $Log:   C:/net/gate/uu2fido/vcs/address.c_v  $
 *      
 *         Rev 1.1   23 Sep 1991 17:20:42   dz
 *      Bang path address reckognition improved, but not tested.
 *      Added '%' reckognition.
 *      
 *         Rev 1.0   28 Aug 1991 00:25:50   dz
 *      Initial revision.
 *
 *
\*/

#include	<style.h>
//#include	<ctype.h>
//#include	<errno.h>
#include	<stdlib.h>
#include	<string.h>
//#include	<time.h>

#include	<fido_msg.h>

#include	"..\version.h"

#include	"uu2fido.h"
#include	"setup.h"
#include	"log.h"



bool
search_dest( fido_addr *fido_to, char *to ) {
	char	shrt[100];
	char	*p;


	strncpy( shrt, to, 100 );
	if( (p = strpbrk( shrt, "@%" ) ) != NULL )
		*p = '\0';

	if( (p = strrchr( shrt, '!' ) ) != NULL )
		strcpy( shrt, p+1 );

	strlwr( shrt );

	debug("Long  UUCP name = '%s'", to );
	debug("Short UUCP name = '%s'", shrt );


	for( int i = 0; i < MAXUSER; i++ ) {
		if( strcmp( shrt, user[i].uucp_name ) )
			continue;

		*fido_to = user[i].fido_address;
		return Ok;
		}

	return Err;
	}



bool
remap_addr( fido_addr *fido_to, char *to ) {

	if( search_dest( fido_to, to ) == Err ) {
		error("Can't deliver msg to '%s' - user unknown.", to );

		if( search_dest( fido_to, conf.postmaster ) == Err ) {
			error("postmaster not found! Message lost!");
			fido_to->net		=
			fido_to->node		= 0;
			return Err;
			}

		}

	return Ok;
	}




