
#ifndef SW_EVENT
#define SW_EVENT

#include "sw_types.h"
#include <style.h>

class sw_key // used as a namespace for key definitions
    {
    public:
        enum k
            {
            none = 0,
            
            tab = 0x0F, ins = 0x52, del = 0x53, bs = 0x0e,
            space = 0x39, enter = 0x1C, esc = 0x01,
            
            left = 0x4B, right = 0x4D, up = 0x48, down = 0x50,
            cleft = 0x73, cright = 0x74, cup = 0x8D, cdown = 0x91,

            pgup = 0x49, pgdn = 0x51, home = 0x47, end = 0x4F,
            
            f1 = 0x3B, f2 = 0x3C, f3 = 0x3D, f4 = 0x3E, f5 = 0x3F, f6 = 0x40,
            f7 = 0x41, f8 = 0x42, f9 = 0x43, f10 = 0x44, f11 = 0x85, f12 = 0x86,

            cf1 = 0x5E,
            cf11 = 0x89,

            sf1 = 0x54, sf2 = 0x55, sf3 = 0x56, sf4 = 0x57, sf5 = 0x58, sf6 = 0x59,
            sf7 = 0x5A, sf8 = 0x5B, sf9 = 0x5C, sf10 = 0x5D, sf11 = 0x87,  sf12 = 0x88,

            af1 = 0x68,
            af11 = 0x8B

            
            };
    };
    


class sw_event
    {
    public:
          // Delivery:
          //   To focus until confirmed
          //   To focus, forced
          //   Broadcast until confirmed
          //   Broadcast, forced
          //   To window in given position (Mouse)
        enum md { Focus = 0x00, FFocus = 0x01, Broad = 0x02, FBroad = 0x03, Mouse = 0x04 };
        //enum et { Key, Mouse, Info };
        enum it
            {
            Nothing,
            
              // Focus related
            NotInFocus, InFocus,

              // Aliases
            ContextMenu, // sent as Info if not from mouse, else as Mouse.

              // Keyboard
            KeyPress,
            
              // Mouse
            Mouse1Click, Mouse1DoubleClick, Mouse1Drag, Mouse1Press, Mouse1Release,
            Mouse2Click, Mouse2DoubleClick, Mouse2Drag, Mouse2Press, Mouse2Release,
            Mouse3Click, Mouse3DoubleClick, Mouse3Drag, Mouse3Press, Mouse3Release,
            MouseMove,
            BeginOfCapture, EndOfCapture
            };
        enum st
            {
            NoShifts = 0,
            RShift = 0x0001, LShift = 0x0002,  Control = 0x0004, Alt = 0x0008,
            Scrolllock_on = 0x0010, Numlock_on = 0x0020, Capslock_on = 0x0040,
            Insert_on = 0x0080, LControl = 0x0100, LAlt = 0x0200,
            RControl = 0x0400, RAlt = 0x0800,
            Scrolllock = 0x1000, Numlock = 0x2000,
            Capslock = 0x4000, Sysreq = 0x8000
            };

    private:
        md             mode_v;
        //et             type_v;
        it             info_v;
        char           akey_v;
        short          vkey_v;
        st             shifts_v;
        sw_point       pos_v;
    public:
        sw_event( it info, md mode = Focus )
            : info_v(info), mode_v(mode),
            shifts_v(NoShifts), pos_v(0,0), akey_v(0), vkey_v(0)
            {}
        
        sw_event( const sw_point &pos, it info, md mode = Mouse )
            : pos_v(pos), info_v(info), mode_v(mode),
            shifts_v(NoShifts), akey_v(0), vkey_v(0)
            {}
        
        sw_event( char a, short v, short s, md mode = Focus )
            : akey_v(a), vkey_v(v), shifts_v((st)s), mode_v(mode),
            pos_v(0,0), info_v(KeyPress)
            {}


        int operator == ( const sw_event &e ) const;

        md             mode()   const { return mode_v; }
        int            broad()  const { return ((int)mode_v) & 0x02; }
        int            forced() const { return ((int)mode_v) & 0x01; }
        int            mouse()  const { return ((int)mode_v) & 0x04; } // event is from mouse
        
        //et             type() const { return type_v; }

        it             info() const { return info_v; }

        virtual short  fkey() const
            { return info_v == KeyPress ? vkey_v : 0; }

        virtual char   akey() const 
            { return type_v == Key ? akey_v : 0; }

        virtual bool   shift() const 
            { return shifts_v & (RShift|LShift) ? Yes : No; }

        const sw_point & pos() const { return pos_v; }

    };


#endif // SW_EVENT

